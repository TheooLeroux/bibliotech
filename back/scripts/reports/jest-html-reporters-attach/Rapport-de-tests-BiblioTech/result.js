window.jest_html_reporters_callback__({"numFailedTestSuites":3,"numFailedTests":21,"numPassedTestSuites":0,"numPassedTests":0,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":2,"numTodoTests":1,"numTotalTestSuites":3,"numTotalTests":22,"startTime":1750599962916,"success":false,"testResults":[{"numFailingTests":2,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750599963939,"loadTestEnvironmentEnd":1750599962971,"loadTestEnvironmentStart":1750599962933,"runtime":967,"setupAfterEnvEnd":1750599963111,"setupAfterEnvStart":1750599963111,"setupFilesEnd":1750599962972,"setupFilesStart":1750599962972,"slow":false,"start":1750599962972},"testFilePath":"C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\01-db.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDatabase connectivity & schema › doit se connecter à MariaDB et trouver la table Users\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mresolves\u001b[2m.\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\n    Received promise rejected instead of resolved\n    Rejected to value: \u001b[31m[SequelizeAccessDeniedError: (conn:54, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)]\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  5 |\u001b[39m describe(\u001b[32m'Database connectivity & schema'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m  6 |\u001b[39m     it(\u001b[32m'doit se connecter à MariaDB et trouver la table Users'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  7 |\u001b[39m         \u001b[36mawait\u001b[39m expect(sequelize\u001b[33m.\u001b[39mauthenticate())\u001b[33m.\u001b[39mresolves\u001b[33m.\u001b[39mtoBeUndefined()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  8 |\u001b[39m         \u001b[36mconst\u001b[39m tables \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39mgetQueryInterface()\u001b[33m.\u001b[39mshowAllTables()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  9 |\u001b[39m         expect(tables)\u001b[33m.\u001b[39mtoEqual(expect\u001b[33m.\u001b[39marrayContaining([\u001b[32m'Users'\u001b[39m]))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat expect (\u001b[22m\u001b[2mnode_modules/expect/build/index.js\u001b[2m:2113:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.expect (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/01-db.test.js\u001b[39m\u001b[0m\u001b[2m:7:15)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mDatabase connectivity & schema › doit se connecter à MongoDB et trouver la collection users\u001b[39m\u001b[22m\n\n    MongooseError: The `uri` parameter to `openUri()` must be a string, got \"undefined\". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     it(\u001b[32m'doit se connecter à MongoDB et trouver la collection users'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 13 |\u001b[39m         \u001b[36mawait\u001b[39m mongoose\u001b[33m.\u001b[39mconnect(process\u001b[33m.\u001b[39menv\u001b[33m.\u001b[39m\u001b[33mMONGO_URI\u001b[39m\u001b[33m,\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m             useNewUrlParser\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m             useUnifiedTopology\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat NativeConnection.createClient (\u001b[22m\u001b[2mnode_modules/mongoose/lib/drivers/node-mongodb-native/connection.js\u001b[2m:237:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat NativeConnection.openUri (\u001b[22m\u001b[2mnode_modules/mongoose/lib/connection.js\u001b[2m:1071:34)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Mongoose.connect (\u001b[22m\u001b[2mnode_modules/mongoose/lib/mongoose.js\u001b[2m:450:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.connect (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/01-db.test.js\u001b[39m\u001b[0m\u001b[2m:13:24)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Database connectivity & schema"],"duration":18,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mresolves\u001b[2m.\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\nReceived promise rejected instead of resolved\nRejected to value: \u001b[31m[SequelizeAccessDeniedError: (conn:54, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)]\u001b[39m\n    at expect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\expect\\build\\index.js:2113:15)\n    at Object.expect (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\01-db.test.js:7:15)\n    at Promise.finally.completed (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1499:10)\n    at _callCircusTest (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1009:40)\n    at _runTest (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:829:11)\n    at run (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1920:21)\n    at jestAdapter (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\runner.js:101:19)\n    at runTestInternal (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-runner\\build\\index.js:272:16)\n    at runTest (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-runner\\build\\index.js:340:7)"],"fullName":"Database connectivity & schema doit se connecter à MariaDB et trouver la table Users","status":"failed","title":"doit se connecter à MariaDB et trouver la table Users"},{"ancestorTitles":["Database connectivity & schema"],"duration":1,"failureMessages":["MongooseError: The `uri` parameter to `openUri()` must be a string, got \"undefined\". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.\n    at NativeConnection.createClient (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\mongoose\\lib\\drivers\\node-mongodb-native\\connection.js:237:11)\n    at NativeConnection.openUri (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\mongoose\\lib\\connection.js:1071:34)\n    at Mongoose.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\mongoose\\lib\\mongoose.js:450:15)\n    at Object.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\01-db.test.js:13:24)\n    at Promise.finally.completed (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1499:10)\n    at _callCircusTest (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1009:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:829:11)\n    at run (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1920:21)\n    at jestAdapter (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-circus\\build\\runner.js:101:19)\n    at runTestInternal (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-runner\\build\\index.js:272:16)\n    at runTest (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-runner\\build\\index.js:340:7)"],"fullName":"Database connectivity & schema doit se connecter à MongoDB et trouver la collection users","status":"failed","title":"doit se connecter à MongoDB et trouver la collection users"}]},{"numFailingTests":11,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750599964662,"loadTestEnvironmentEnd":1750599963948,"loadTestEnvironmentStart":1750599963944,"runtime":714,"setupAfterEnvEnd":1750599963982,"setupAfterEnvStart":1750599963982,"setupFilesEnd":1750599963948,"setupFilesStart":1750599963948,"slow":false,"start":1750599963948},"testFilePath":"C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › devrait laisser l'admin lister tous les utilisateurs\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › devrait refuser la liste des users à un non-admin\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › devrait exiger une authentification pour /api/users\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › devrait permettre à un user de voir son propre profil\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › ne devrait pas permettre à un user de voir le profil d'un autre\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › devrait laisser l'admin consulter n'importe quel profil\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › devrait permettre à un user de mettre à jour son propre profil\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › ne devrait pas permettre à un user de modifier le profil d'un autre\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › devrait laisser l'admin modifier n'importe quel user\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › devrait laisser l'admin supprimer un utilisateur\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mUser Endpoints › ne devrait pas laisser un non-admin supprimer un utilisateur\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[90m// sync + nettoyage\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[90m// login admin (suppose qu'il existe et a déjà le rôle admin)\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\n  \u001b[1m● \u001b[22mTest suite failed to run\n\n    SequelizeAccessDeniedError: (conn:56, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\n    \u001b[0m \u001b[90m 45 |\u001b[39m\n     \u001b[90m 46 |\u001b[39m afterAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 47 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 48 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39mclose()\u001b[33m;\u001b[39m\n     \u001b[90m 49 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 50 |\u001b[39m\u001b[0m\n\n      \u001b[2mat ConnectionManager.connect (\u001b[22mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\n      \u001b[2mat ConnectionManager._connect (\u001b[22mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\n      \u001b[2mat ConnectionManager.getConnection (\u001b[22mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\n      \u001b[2mat MySQLQueryInterface.bulkDelete (\u001b[22mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:992:12)\u001b[22m\n      \u001b[2mat Function.destroy (\u001b[22mnode_modules/sequelize/src/model.js\u001b[2m:3083:16)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mtests/03-user.test.js\u001b[39m\u001b[0m\u001b[2m:47:5)\u001b[22m\n","testResults":[{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints devrait laisser l'admin lister tous les utilisateurs","status":"failed","title":"devrait laisser l'admin lister tous les utilisateurs"},{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints devrait refuser la liste des users à un non-admin","status":"failed","title":"devrait refuser la liste des users à un non-admin"},{"ancestorTitles":["User Endpoints"],"duration":1,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints devrait exiger une authentification pour /api/users","status":"failed","title":"devrait exiger une authentification pour /api/users"},{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints devrait permettre à un user de voir son propre profil","status":"failed","title":"devrait permettre à un user de voir son propre profil"},{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints ne devrait pas permettre à un user de voir le profil d'un autre","status":"failed","title":"ne devrait pas permettre à un user de voir le profil d'un autre"},{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints devrait laisser l'admin consulter n'importe quel profil","status":"failed","title":"devrait laisser l'admin consulter n'importe quel profil"},{"ancestorTitles":["User Endpoints"],"duration":1,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints devrait permettre à un user de mettre à jour son propre profil","status":"failed","title":"devrait permettre à un user de mettre à jour son propre profil"},{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints ne devrait pas permettre à un user de modifier le profil d'un autre","status":"failed","title":"ne devrait pas permettre à un user de modifier le profil d'un autre"},{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints devrait laisser l'admin modifier n'importe quel user","status":"failed","title":"devrait laisser l'admin modifier n'importe quel user"},{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints devrait laisser l'admin supprimer un utilisateur","status":"failed","title":"devrait laisser l'admin supprimer un utilisateur"},{"ancestorTitles":["User Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:55, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\03-user.test.js:17:5)"],"fullName":"User Endpoints ne devrait pas laisser un non-admin supprimer un utilisateur","status":"failed","title":"ne devrait pas laisser un non-admin supprimer un utilisateur"}]},{"numFailingTests":8,"numPassingTests":0,"numPendingTests":0,"numTodoTests":1,"perfStats":{"end":1750599965082,"loadTestEnvironmentEnd":1750599964670,"loadTestEnvironmentStart":1750599964667,"runtime":412,"setupAfterEnvEnd":1750599964702,"setupAfterEnvStart":1750599964702,"setupFilesEnd":1750599964670,"setupFilesStart":1750599964670,"slow":false,"start":1750599964670},"testFilePath":"C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › devrait enregistrer un nouvel utilisateur\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › ne devrait pas enregistrer un utilisateur si l’email existe déjà\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › devrait connecter un utilisateur existant\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › ne devrait pas connecter avec un mauvais mot de passe\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › doit renvoyer 400 si email ou mot de passe absent\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › devrait générer un lien de réinitialisation (forgot-password)\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › devrait renvoyer 404 si l'email n'existe pas (forgot-password)\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › ne devrait pas réinitialiser le mot de passe sans token valide\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAuth Endpoints › devrait réinitialiser le mot de passe avec un token valide\u001b[39m\u001b[22m\n\n    SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m     \u001b[90m// synchronisation et suppression préalable\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39msync()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager._connect (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ConnectionManager.getConnection (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat MySQLQueryInterface.tableExists (\u001b[22m\u001b[2mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:242:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Function.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/model.js\u001b[2m:1349:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Sequelize.sync (\u001b[22m\u001b[2mnode_modules/sequelize/src/sequelize.js\u001b[2m:825:9)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:11:5)\u001b[22m\u001b[2m\u001b[22m\n\n\n  \u001b[1m● \u001b[22mTest suite failed to run\n\n    SequelizeAccessDeniedError: (conn:58, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n\n    \u001b[0m \u001b[90m 15 |\u001b[39m afterAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 16 |\u001b[39m     \u001b[90m// nettoyage et fermeture de la connexion\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mawait\u001b[39m \u001b[33mUser\u001b[39m\u001b[33m.\u001b[39mdestroy({ where\u001b[33m:\u001b[39m { email\u001b[33m:\u001b[39m \u001b[33mTEST_EMAIL\u001b[39m } })\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 18 |\u001b[39m     \u001b[36mawait\u001b[39m sequelize\u001b[33m.\u001b[39mclose()\u001b[33m;\u001b[39m\n     \u001b[90m 19 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 20 |\u001b[39m\u001b[0m\n\n      \u001b[2mat ConnectionManager.connect (\u001b[22mnode_modules/sequelize/src/dialects/mariadb/connection-manager.js\u001b[2m:107:17)\u001b[22m\n      \u001b[2mat ConnectionManager._connect (\u001b[22mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:332:24)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:250:32\u001b[22m\n      \u001b[2mat ConnectionManager.getConnection (\u001b[22mnode_modules/sequelize/src/dialects/abstract/connection-manager.js\u001b[2m:280:7)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/sequelize/src/sequelize.js\u001b[2m:638:26\u001b[22m\n      \u001b[2mat MySQLQueryInterface.bulkDelete (\u001b[22mnode_modules/sequelize/src/dialects/abstract/query-interface.js\u001b[2m:992:12)\u001b[22m\n      \u001b[2mat Function.destroy (\u001b[22mnode_modules/sequelize/src/model.js\u001b[2m:3083:16)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mtests/02-auth.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\n","testResults":[{"ancestorTitles":["Auth Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints devrait enregistrer un nouvel utilisateur","status":"failed","title":"devrait enregistrer un nouvel utilisateur"},{"ancestorTitles":["Auth Endpoints"],"duration":1,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints ne devrait pas enregistrer un utilisateur si l’email existe déjà","status":"failed","title":"ne devrait pas enregistrer un utilisateur si l’email existe déjà"},{"ancestorTitles":["Auth Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints devrait connecter un utilisateur existant","status":"failed","title":"devrait connecter un utilisateur existant"},{"ancestorTitles":["Auth Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints ne devrait pas connecter avec un mauvais mot de passe","status":"failed","title":"ne devrait pas connecter avec un mauvais mot de passe"},{"ancestorTitles":["Auth Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints doit renvoyer 400 si email ou mot de passe absent","status":"failed","title":"doit renvoyer 400 si email ou mot de passe absent"},{"ancestorTitles":["Auth Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints devrait générer un lien de réinitialisation (forgot-password)","status":"failed","title":"devrait générer un lien de réinitialisation (forgot-password)"},{"ancestorTitles":["Auth Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints devrait renvoyer 404 si l'email n'existe pas (forgot-password)","status":"failed","title":"devrait renvoyer 404 si l'email n'existe pas (forgot-password)"},{"ancestorTitles":["Auth Endpoints"],"duration":0,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints ne devrait pas réinitialiser le mot de passe sans token valide","status":"failed","title":"ne devrait pas réinitialiser le mot de passe sans token valide"},{"ancestorTitles":["Auth Endpoints"],"duration":null,"failureMessages":["SequelizeAccessDeniedError: (conn:57, no: 1045, SQLState: 28000) Access denied for user 'theol'@'localhost' (using password: NO)\n    at ConnectionManager.connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js:107:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ConnectionManager._connect (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:332:24)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:250:32\n    at ConnectionManager.getConnection (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js:280:7)\n    at C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:638:26\n    at MySQLQueryInterface.tableExists (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js:242:17)\n    at Function.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\model.js:1349:21)\n    at Sequelize.sync (C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\sequelize\\src\\sequelize.js:825:9)\n    at Object.<anonymous> (C:\\xampp\\htdocs\\BiblioTech\\back\\tests\\02-auth.test.js:11:5)"],"fullName":"Auth Endpoints devrait réinitialiser le mot de passe avec un token valide","status":"todo","title":"devrait réinitialiser le mot de passe avec un token valide"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":[],"coverageDirectory":"C:\\xampp\\htdocs\\BiblioTech\\back\\coverage","coverageProvider":"babel","coverageReporters":["json","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":true,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":1,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"outputFile":"C:\\xampp\\htdocs\\BiblioTech\\back\\reports\\test-results-2025-06-22T13-46-01-767Z.json","passWithNoTests":false,"projects":[],"reporters":[["default",{}],["C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"reports","filename":"Rapport-de-tests-BiblioTech.html","expand":true,"pageTitle":"Rapport de tests BiblioTech"}]],"rootDir":"C:\\xampp\\htdocs\\BiblioTech\\back","runInBand":true,"runTestsByPath":false,"seed":1506677015,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPatterns":{"patterns":[],"type":"TestPathPatterns"},"testSequencer":"C:\\xampp\\htdocs\\BiblioTech\\back\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":true,"waitForUnhandledRejections":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1750599965089,"_reporterOptions":{"publicPath":"reports","filename":"Rapport-de-tests-BiblioTech.html","expand":true,"pageTitle":"Rapport de tests BiblioTech","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})